const firebase = require("firebase-admin");

class Database {
  static version = require("./package.json").version;

  /**
   * @example
   * // You must create a file named "credential.json" with the content of private key file generated by Firebase to use this example
   * const credential = require("./credential.json");
   *
   * // quick.fb
   * const Database = require("quick.fb")
   * const db = new Database("https://quick-this.raw.database()-npm-default-rtdb.firebaseio.com", credential);
   *
   * Creates an instance of Database.
   * @param {string} databaseURL
   * You can find your Realtime Database URL in the Realtime Database section of the Firebase console.
   *
   * @param {object} databaseCredential
   * Navigate to the Service Accounts tab in your project's settings page and click the Generate New Private Key button at the bottom of the Firebase Admin SDK section of the Service Accounts tab.
   *
   * @param {string} key
   * @param {any} value
   *
   * @memberof Database
   */

  constructor(databaseURL, databaseCredential) {
    if (typeof databaseURL !== "string")
      throw new TypeError("Database URL must be a String");

    if (typeof databaseCredential !== "object")
      throw new TypeError("Database Credential must be a String");

    firebase.initializeApp({
      credential: firebase.credential.cert(databaseCredential),
      databaseURL: databaseURL,
    });

    this.raw = firebase;
  }

  /**
   * @description
   * Fetchs a key from Firebase, if it doesn't exist returns null
   *
   * @example
   *
   * const guildId = "736661118776246414";
   *
   * db.get(`guilds/${guildId}/logsChannel`).then((value) => {
   *  console.log(value); // => 759486260250280038
   * });
   *
   *
   * @returns {any}
   */

  async get(key) {
    if (typeof key !== "string") throw new TypeError("Key must be a string");
    const finalPath = key.replace(/\./g, "/");

    const finalRef = this.raw.database().ref(finalPath);
    const snap = await finalRef.once("value");
    return snap.val();
  }

  /**
   * @description
   * Sets a key in the firebase Database
   *
   * @example
   *
   * const logsChannel = "759486260250280038";
   * const guildId = "736661118776246414";
   *
   * db.set(`guilds/${guildId}/logsChannel`, logsChannel).then(() => {
   *    db.get(`guilds/${guildId}/logsChannel`).then((value) => {
   *        console.log(value); // => 759486260250280038
   *    });
   * });
   *
   * @returns {any}
   */

  async set(key, value) {
    if (typeof key !== "string") throw new TypeError("Key must be a string");
    if (typeof key === Infinity)
      throw new TypeError("Value must not be Infinity");

    const finalPath = key.replace(/\./g, "/");
    const dbRef = await this.raw.database().ref(finalPath).set(value);
    return value;
  }

  /**
   * @description
   * Checks if the provided key exists in the database
   *
   * @example
   *
   * const guildId = "736661118776246414";
   *
   * db.has(`guilds/${guildId}/logsChannel`).then((result) => {
   *   console.log(result); // => true
   * });
   *
   * @returns {boolean}
   */

  async has(key) {
    if (typeof key !== "string") throw new TypeError("Key must be a string");
    const finalPath = key.replace(/\./g, "/");

    const finalRef = this.raw.database().ref(finalPath);
    const snap = await finalRef.once("value");
    return snap.exists();
  }

  /**
   * @description
   * Deletes a key from the database
   *
   * @example
   *
   * const guildId = "736661118776246414";
   *
   * db.delete(`guilds/${guildId}/logsChannel`) // => true
   *
   * @returns {boolean}
   */

  async delete(key) {
    if (typeof key !== "string") throw new TypeError("Key must be a string");
    const finalPath = key.replace(/\./g, "/");
    let stat = "";

    await this.raw
      .database()
      .ref(finalPath)
      .remove()
      .then(() => {
        stat = true;
      })
      .catch((err) => {
        stat = false;
        throw new Error("FirebaseError: " + err);
      });

    return stat;
  }

  /**
   * @description
   * Adds a number from a key in the database, if the key doesn't exist or is not a number it will use 0 as the base number.
   *
   * @example
   *
   * const userId = "528288312448909312";
   *
   * db.add(`users/${userId}/coins`, 1) // => 1
   *
   * @returns {number}
   */

  async add(key, val) {
    if (typeof key !== "string") throw new Error("Key must be a string");
    if (typeof val !== "number") throw new Error("Value must be a number");

    const finalPath = key.replace(/\./g, "/");

    const dbRef = await this.raw.database().ref(finalPath);
    let finalRet = "";

    await dbRef.once("value", (value) => {
      if (!value.exists()) {
        const finalNum = parseInt(0 + val);
        dbRef.set(finalNum);

        return (finalRet = finalNum);
      } else {
        const num = value.val();
        let fNum = "";

        if (typeof num === "number") {
          dbRef.set(parseInt(num + val));
          finalRet = parseInt(num + val);
        } else {
          fNum = parseInt(num);
          if (isNaN(fNum)) {
            fNum = 0;
          }

          dbRef.set(parseInt(fNum + val));
          finalRet = parseInt(fNum + val);
        }
      }
    });

    return finalRet;
  }

  /**
   * @description
   * Substracts a number from a key in the database, if the key doesn't exist or is not a number it will use 0 as the base number.
   *
   * @example
   *
   * const userId = "528288312448909312";
   *
   * db.substract(`users/${userId}/coins`, 1) // => 0
   *
   * @returns {number}
   */

  async substract(key, val) {
    if (typeof key !== "string") throw new Error("Key must be a string");
    if (typeof val !== "number") throw new Error("Value must be a number");

    const finalPath = key.replace(/\./g, "/");

    const dbRef = await this.raw.database().ref(finalPath);
    let finalRet = "";

    await dbRef.once("value", (value) => {
      if (!value.exists()) {
        const finalNum = parseInt(0 - val);
        dbRef.set(finalNum);

        return (finalRet = finalNum);
      } else {
        const num = value.val();
        let fNum = "";

        if (typeof num === "number") {
          dbRef.set(parseInt(num - val));
          finalRet = parseInt(num - val);
        } else {
          fNum = parseInt(num);
          if (isNaN(fNum)) {
            fNum = 0;
          }

          dbRef.set(parseInt(fNum - val));
          finalRet = parseInt(fNum - val);
        }
      }
    });

    return finalRet;
  }

  /**
   * @description
   * Creates an array if it doesn't already exist and pushs the provided value into it.'
   *
   * @example
   *
   * const userId = "528288312448909312";
   *
   * db.set(`users/${userId}/items`, ["Helmet"]) // => ["Helmet"]
   * db.push(`users/${userId}/items`, "Sword") // => ["Helmet", "Sword"]
   *
   * @returns {Array}
   */

  async push(key, val) {
    if (typeof key !== "string") throw new Error("Key must be a string");
    const finalPath = key.replace(/\./g, "/");

    const dbRef = await this.raw.database().ref(finalPath);
    let finalArray;

    await dbRef.once("value", (value) => {
      if (value.val() instanceof Array) {
        finalArray = value.val();
        finalArray.push(val);
      } else {
        finalArray = [];
        finalArray.push(val);
      }

      dbRef.set(finalArray);
    });

    return finalArray;
  }
}

module.exports = Database;
